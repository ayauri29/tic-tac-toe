{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","Component","Game","state","showMov","xIsNext","stepNumber","history","Array","fill","step","setState","slice","length","calculateWinner","concat","status","showMove","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce94533b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nexport default function Square(props){\r\n\treturn (\r\n\t\t<button className=\"square\" onClick={props.onClick}>\r\n\t\t\t<span>{props.value}</span>\r\n\t\t</button>\r\n\t)\r\n}","import React, { Component } from 'react'\r\nimport Square from './Square'\r\n\r\nexport default class Board extends Component {\r\n\trenderSquare(i) {\r\n\t\treturn <Square className=\"cell\" value={this.props.squares[i]} onClick={() => this.props.onClick(i)}></Square>\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t\t{this.renderSquare(0)}\r\n\t\t\t\t\t{this.renderSquare(1)}\r\n\t\t\t\t\t{this.renderSquare(2)}\r\n\t\t\t\t\t{this.renderSquare(3)}\r\n\t\t\t\t\t{this.renderSquare(4)}\r\n\t\t\t\t\t{this.renderSquare(5)}\r\n\t\t\t\t\t{this.renderSquare(6)}\r\n\t\t\t\t\t{this.renderSquare(7)}\r\n\t\t\t\t\t{this.renderSquare(8)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t}\r\n}","import React, { Component } from 'react'\r\nimport Board from './Board';\r\n\r\nexport default class Game extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tshowMov: false,\r\n\t\t\txIsNext: true,\r\n\t\t\tstepNumber: 0,\r\n\t\t\thistory: [\r\n\t\t\t\t{\r\n\t\t\t\t\tsquares: Array(9).fill(null)\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n\r\n\tjumpTo(step) {\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: (step % 2) === 0\r\n\t\t})\r\n\t}\r\n\r\n\tshowMoves() {\r\n\t\tthis.setState({\r\n\t\t\tshowMov: !this.state.showMov\r\n\t\t})\r\n\r\n\t}\r\n\r\n\thandleClick(i) {\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\r\n\t\tconst current = history[history.length - 1];\r\n\r\n\t\tconst squares = current.squares.slice();\r\n\r\n\t\tconst winner = calculateWinner(squares)\r\n\t\tif (winner || squares[i]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat({\r\n\t\t\t\tsquares: squares\r\n\t\t\t}),\r\n\t\t\txIsNext: !this.state.xIsNext,\r\n\t\t\tstepNumber: history.length\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n\trender() {\r\n\t\tconst showMove = this.state.showMov;\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[this.state.stepNumber];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ? 'Go to #' + move : 'Start the Game';\r\n\t\t\treturn (\r\n\t\t\t\t<li className=\"li-moves\" key={move}>\r\n\t\t\t\t\t<button key={move} className=\"btn-moves\" onClick={() => this.jumpTo(move)}>\r\n\t\t\t\t\t\t{desc}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t});\r\n\r\n\t\tlet status;\r\n\r\n\t\tif (winner) {\r\n\t\t\tstatus = \"Winner is\" + winner;\r\n\r\n\t\t} else {\r\n\t\t\tstatus = \"Next player is \" + (this.state.xIsNext ? 'X' : 'O')\r\n\r\n\t\t}\r\n\t\treturn (\r\n\r\n\t\t\t<div className=\"game\">\r\n\t\t\t\t<div className=\"info-winner\">{status}</div>\r\n\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t<div className=\"game-board\">\r\n\t\t\t\t\t\t<Board onClick={(i) => this.handleClick(i)} squares={current.squares} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>{showMove}</div>\r\n\t\t\t\t\t<div className=\"game-info\">\r\n\t\t\t\t\t\t<div className=\"moves\">{moves}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n\tconst lines = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6]\r\n\r\n\t]\r\n\r\n\tfor (let i = 0; i < lines.length; i++) {\r\n\t\tconst [a, b, c] = lines[i]\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[b] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}","import React, { Fragment } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './components/Game';\n\nfunction App() {\n  return (\n    <Fragment>\n      <h1>TIC-TAC-TOE</h1>\n      <Game />\n      {/* <footer>Â© 2020 Copyright: Alba Yauri Ituccayasi</footer> */}\n    </Fragment>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}